instalando o php:
-basta baixar o .zip do site, coloca a pasta em alguem lugar e depois instalar as variaveis do sistema;
-nas variaveis do sistema basta apontar o PATH para a pasta do php criada;

instalar composer que é um gerenciador dos pacote do PHP;
-configurando os repositores que o composer irá usar: 
1: composer config -g repo.packagist composer https://packagist.org
2: composer config -g github-protocols https ssh
instalar o laravel que é o framework;
-composer create-project --prefer-dist laravel/laravel projeto_laravel_via_composer "7.0"
-carregando o laravel: entra na pasta public do laravel criado e coloca o comando: php -S localhost:8000 ou php artisan serve

-Comandos artisan:
-criando um controller:
    php artisan make:controller PrincipalController
-criando um model (nome sempre no singular)   
    php artisan make:model SiteContato

    nesse caso tem que criar as migrations na mão (bom para corrigir a questão do plural na criação das tabelas)
    COMANDO: php artisan make:migration create_fornecedores_table

    criando um alter table
    php artisan make:migration alter_fornecedores_novas_colunas

-criando um model com migrations (nome sempre no singular, pq o migrations transforma no plural) 
    php artisan make:model SiteContato -m


-usando o tinker para testar os models
    php artisan tinker    

    -comandos do tinker
    instanciando um objeto no teste: $variavel = new \App\SiteContato();
    exibindo informações: print_r($variavel->getAttributes());
    salvando no banco: $variavel->save();
    sair do tinker: quit
    colocando a class no contexto pra facilitar a chamada dela: use \App\Fornecedor;
    usando metodo create no tinker: \App\Fornecedor::create(['nome'=>'FonecedorX','site'=>'fornecedorx.com.br','uf'=>'CE','email'=>'fornecedorex@fornecedrox.cm.br']);
    trazendo tudo de banco: \App\Fornecedor::all();
    tranzendo o metodo all com aparecia de uma array : print_r($fonecedores->toArray());
    trazendo com o metodo find (aqui estou usando o use): $fornecedor2 = Fornecedor::find([1,2]);
    usando o where no tinker (operadores: diferente-> <>, igual -> == ou não informa nada ): $fornecedores2 = Fornecedor::where('id','>',1)->get();
    usando o where com o In no tinker: $fornecedores2 = Fornecedor::whereIn('id',[1,3])->get();
    usando o where diferente do In no tinker: $fornecedores2 = Fornecedor::whereNotIn('id',[1,3])->get();
    usando o where entre valores no tinker: $fornecedores2 = Fornecedor::whereBetween('id',[1,3])->get();
    usando o where fora do entre valores no tinker: $fornecedores2 = Fornecedor::whereNotBetween('id',[1,3])->get();
    o operador logico AND no where basta usar o "->" podendo ter varios    
    o operador logico OR no where basta usar o "->" com o "or" antes da condição (WhereIn), podendo ter varios: ->orWhereIn    
    usando is null: whereNull('nome')->get();
    usando is not null: whereNotNull('nome')->get();
    where com data: whereDate('created_at','2022-03-28'); ou whereDay('created_at','28'); ou whereMonth('created_at','03'); ou whereYear('created_at','2022'); ou whereTime('created_at','=','21:09:01');
    where entre colunas (igual é sem parametros): whereColumn('created_at','<>','updated_at');
    grupo de condições (precisa de função callback): $fornecedores = $Fornecedor::where(funcion($query){$query->where('nome','jorge')})->where(function($query){$query->whereIn('uf',['CE','SP'])})-get();
    order by: $fornecedores2 = Fornecedor::whereIn('id',[1,3])->orderBy('nome','asc')->get();

    loop com o foreach: foreach($fornecedores as $f){echo $f->nome;echo ' - ';}

    --colletions
    primeiro registro: $fornecedores2->first();
    ultimo registro: $fornecedores2->last();
    invertendo array dos registro: $fornecedores2->reverse();
    convertendo a coleção do objeto em um json: Fornecedor::all()->toJson();
    pluck retorno o valor de uma chave de toda a coleção: Fornecedor::all()->pluck('email','nome');

extensões para melhor trabalha o php no vs code:
laravel-blade

-comando das migrations
    obs.:  as variavel do database.php da pasta conf ficam dentro do .env 
    
    COMANDO para up: php artisan migrate
    COMANDO para down: php artisan migrate:rollback (esse faz apenas no ultimo)
    COMANDO para down: php artisan migrate:rollback --step=2 (diz quanto rollback deve haver)

    obs.: se aparece o erro ("could not find driver") tem ir no php.ini e descomentar o trecho "extension=pdo_sqlite " retirando o ";"

    //atalho pra ver a tabela migrations do banco
    php artisan migrate:status

    //faz todos os rollbacks resetando todo o banco
    php artisan migrate:reset

    //faz o reset (com rollback) e em seguida executa todas as migrations
    php artisan migrate:refresh

    //faz o drop de tudo (não é rollback) e em seguida cria tudo de novo
    php artisan migrate:fresh


--testando pelo terminal se uma extenção esta carregado do laravel
php -r "var_dump(extension_loaded('pdo_mysql'));"
obs.: se estiver false deve ir no php.ini e habilitar a mesma tirando o ";"

--Seeders Class sementes para o povoar o banco de dados
php artisan make:seeder FornecedorSeeder

executando os seeders: php artisan db:seed
executar um seeder especifico: php artisan db:seed --class=SiteContatoSeeder

--factories - semear em massa atravez do seeders
php artisan make:factory SiteContatoFactory --model=SiteContato
